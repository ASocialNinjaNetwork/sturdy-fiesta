# <!DOCTYPE html>
<html>
<head>
  <title>SocialNinjaNetwork - Personal Webpage</title>
  <!-- Add any additional meta tags, stylesheets, or scripts here -->
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f9f9f9;
      color: #333;
      margin: 20px;
    }

    h1 {
      color: #007bff;
      text-align: center;
    }

    #content {
      max-width: 800px;
      margin: 0 auto;
    }

    /* Add any additional styles here */

    .course-container {
      margin-top: 30px;
      border: 1px solid #ccc;
      padding: 20px;
    }

    .course-title {
      font-size: 24px;
      font-weight: bold;
      margin-bottom: 10px;
    }

    .course-description {
      margin-bottom: 20px;
    }

    .cta-button {
      display: inline-block;
      background-color: #007bff;
      color: #fff;
      padding: 10px 20px;
      text-decoration: none;
      border-radius: 5px;
    }

  </style>
</head>
<body>
  <div id="content">
    <h1>Welcome to SocialNinjaNetwork</h1>
    <p>Hello there! I'm [Your Full Name], and this is my personal webpage on SocialNinjaNetwork. On this platform, I'm passionate about:</p>
    <ul>
      <li>[Your Area of Expertise/Interest 1]</li>
      <li>[Your Area of Expertise/Interest 2]</li>
      <li>[Your Area of Expertise/Interest 3]</li>
      <!-- Add more items if you have more interests -->
    </ul>

    <!-- You can add more sections or elements to showcase your work, projects, or any other information. -->

    <p>Feel free to connect with me on SocialNinjaNetwork or any other platforms:</p>
    <ul>
      <!-- Add links to your SocialNinjaNetwork profile or other social media profiles -->
      <li><a href="#">SocialNinjaNetwork Profile</a></li>
      <li><a href="#">Twitter</a></li>
      <li><a href="#">LinkedIn</a></li>
      <!-- Add more links as needed -->
    </ul>

    <p>Thank you for visiting my webpage! If you'd like to get in touch, you can reach me at [your email address] or through the contact form on this page.</p>

    <!-- Add a contact form here if you want to allow visitors to send you messages -->

    <div class="course-container">
      <div class="course-title">8-Week Business Course</div>
      <p class="course-description">Learn essential business skills and strategies in this comprehensive 8-week course. Whether you're a budding entrepreneur or an experienced business owner, this course will provide you with valuable insights and practical knowledge to take your business to the next level.</p>
      <a href="[Link to Purchase Page]" class="cta-button">Enroll Now</a>
    </div>

  </div>
</body>
</html>
 workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: cluster-1    # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  REPOSITORY: samples # TODO: update to Artifact Registry docker repository
  IMAGE: static-site

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        token_format: 'access_token'
        workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
        service_account: 'my-service-account@my-project.iam.gserviceaccount.com'

    # Alternative option - authentication via credentials json
    # - id: 'auth'
    #   uses: 'google-github-actions/auth@v0'
    #   with:
    #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Docker configuration
      run: |-
        echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        # replacing the image name in the k8s template
        ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
